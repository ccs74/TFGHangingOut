{"ast":null,"code":"import { Usuario } from '../models/usuario.model';\nimport { of } from 'rxjs';\nimport { environment } from '../../environments/environment';\nimport { tap, map, catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport let UsuarioService = /*#__PURE__*/(() => {\n  class UsuarioService {\n    constructor(http, router) {\n      this.http = http;\n      this.router = router;\n    }\n\n    cargarUsuario(uid, email) {\n      if (uid == \"\") {\n        uid = \"nose\";\n      }\n\n      return this.http.get(`${environment.base_url}/usuarios/${uid}?email=${email}`, this.cabeceras);\n    }\n\n    cargarUsuarios(texto, lugar, min, max) {\n      if (!texto) {\n        texto = \"\";\n      }\n\n      if (!lugar) {\n        lugar = \"\";\n      }\n\n      if (!min) {\n        min = \"\";\n      }\n\n      if (!max) {\n        max = \"\";\n      }\n\n      return this.http.get(`${environment.base_url}/usuarios?texto=${texto}&poblacion=${lugar}&min=${min}&max=${max}`, this.cabeceras);\n    }\n\n    actualizarUsuario(uid, formData) {\n      return this.http.put(`${environment.base_url}/usuarios/${uid}`, formData, this.cabeceras);\n    }\n\n    cambiarEstado(uid) {\n      return this.http.put(`${environment.base_url}/usuarios/cambiarEstado/${uid}`, this.cabeceras);\n    }\n\n    borrarUsuario(uid) {\n      return this.http.delete(`${environment.base_url}/usuarios/${uid}`, this.cabeceras);\n    }\n\n    bloquearUsuario(idUsuario, idDenunciado) {\n      return this.http.put(`${environment.base_url}/usuarios/bloquear/${idUsuario}/${idDenunciado}?token=${this.token}`, this.cabeceras);\n    }\n\n    seguirUsuario(id, usuario) {\n      return this.http.put(`${environment.base_url}/usuarios/${id}/${usuario}?token=${this.token}`, this.cabeceras);\n      ;\n    }\n\n    login(formData) {\n      return this.http.post(`${environment.base_url}/auth`, formData).pipe(tap(res => {\n        console.log(res);\n        localStorage.setItem('token', res['token']);\n        const {\n          uid,\n          rol\n        } = res;\n        this.usuario = new Usuario(uid, rol); //localStorage.setItem('rutascargadas', 'false');\n\n        localStorage.setItem('rol', rol);\n      }));\n    }\n\n    loginGoogle(tokenGoogle) {\n      return this.http.post(`${environment.base_url}/auth/google`, {\n        token: tokenGoogle\n      }).pipe(tap(res => {\n        localStorage.setItem('token', res['token']);\n        const {\n          uid,\n          rol\n        } = res;\n        this.usuario = new Usuario(uid, rol);\n        localStorage.setItem('rol', rol);\n      }));\n    }\n\n    logout() {\n      this.limpiarLocalStorage();\n      this.router.navigateByUrl('/login');\n    }\n\n    registrarUsuario(formData) {\n      return this.http.post(`${environment.base_url}/usuarios`, formData);\n    }\n\n    enviarEmail(formData) {\n      return this.http.post(`${environment.base_url}/auth/enviar/email`, formData, this.cabeceras);\n    }\n\n    activarUsuario(token) {\n      let body = \"\";\n      return this.http.put(`${environment.base_url}/auth/activateUser/${token}`, body);\n    }\n\n    reEnviarEmail(email) {\n      let body = \"\";\n      return this.http.post(`${environment.base_url}/auth/reenviar/${email}`, body);\n    }\n\n    subirImagen(uid, fd, token) {\n      if (!token) {\n        token = \"\";\n        return this.http.put(`${environment.base_url}/usuarios/subir/imagen/perfil/${uid}`, fd, this.cabeceras);\n      } else {\n        return this.http.put(`${environment.base_url}/usuarios/subir/imagen/perfil/${uid}?token=${token}`, fd);\n      }\n    }\n\n    borrarFoto(uid) {\n      return this.http.delete(`${environment.base_url}/usuarios/imagen/${uid}`, this.cabeceras);\n    }\n\n    getEdad(uid) {\n      return this.http.get(`${environment.base_url}/usuarios/edad/${uid}`, this.cabeceras);\n    }\n\n    restablecerPass(uid, formData) {\n      return this.http.put(`${environment.base_url}/auth/password/${uid}`, formData, this.cabeceras);\n    }\n\n    resetPass(formData) {\n      return this.http.put(`${environment.base_url}/auth/changePassword`, formData, this.cabeceras);\n    }\n\n    validar(correcto, incorrecto) {\n      if (this.token === '') {\n        this.limpiarLocalStorage();\n        return of(incorrecto);\n      }\n\n      return this.http.get(`http://localhost:3000/api/auth/token`, this.cabeceras).pipe(tap(res => {\n        // extaemos los datos que nos ha devuelto y los guardamos en el usurio y en localstorage\n        const {\n          uid,\n          rol,\n          token\n        } = res;\n        localStorage.setItem('token', token);\n        this.usuario = new Usuario(uid, rol);\n      }), map(res => {\n        return correcto;\n      }), catchError(err => {\n        this.limpiarLocalStorage();\n        return of(incorrecto);\n      }));\n    }\n\n    validarToken() {\n      return this.validar(true, false);\n    }\n\n    validarNoToken() {\n      return this.validar(false, true);\n    }\n\n    limpiarLocalStorage() {\n      localStorage.removeItem('token');\n      localStorage.removeItem('rol');\n      localStorage.removeItem('email');\n      localStorage.removeItem('before');\n    }\n\n    get token() {\n      return localStorage.getItem('token') || '';\n    }\n\n    get cabeceras() {\n      return {\n        headers: {\n          'x-token': this.token\n        }\n      };\n    }\n\n    get uid() {\n      return this.usuario.uid;\n    }\n\n    get rol() {\n      return this.usuario.rol;\n    }\n\n  }\n\n  UsuarioService.ɵfac = function UsuarioService_Factory(t) {\n    return new (t || UsuarioService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n  };\n\n  UsuarioService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: UsuarioService,\n    factory: UsuarioService.ɵfac,\n    providedIn: 'root'\n  });\n  return UsuarioService;\n})();","map":null,"metadata":{},"sourceType":"module"}